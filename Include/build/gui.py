# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import os
from tkinter import Toplevel, Text
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from Include import modelo
from Include.modelo import Modelo
from Include.gestor import GestorDataFrame
import time
from tkinter import Tk, PhotoImage



CURRENT_PATH = Path(__file__).parent

ASSETS_PATH = CURRENT_PATH / "assets" / "frame0"


def relative_to_assets(path: str) -> str:
    return os.path.join(ASSETS_PATH, path)

Link_datos = None
Analizar_columna = None
link_almacenado = None
columna_almacenada = None

algoritmo = Modelo()


class Vista:

    @staticmethod
    def main():
        window = Tk()

        window.geometry("1080x780")
        window.configure(bg="#FFC7C7")

        canvas = Canvas(
            window,
            bg="#FFC7C7",
            height=780,
            width=1080,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)

        from tkinter import Toplevel, Text

        def heap_sort():
            if columna_almacenada is not None:
                start_time = time.time()
                result = algoritmo.heap_sort(columna_almacenada)
                elapsed_time = time.time() - start_time

                # Crea una nueva ventana
                new_window = Toplevel()
                new_window.title("Resultado de Heap Sort")

                # Crea un widget Text y añade el resultado
                text_widget = Text(new_window)
                text_widget.insert("end", str(result))
                text_widget.insert("end", f"Tiempo de ejecución: {elapsed_time} segundos")
                text_widget.pack()

            else:
                print("No se ha seleccionado ninguna columna")

        button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))

        Heap_button = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=heap_sort,
            relief="flat"
        )
        Heap_button.place(
            x=695.0,
            y=75.0,
            width=248.0,
            height=98.0
        )

        def quick_sort():
            if columna_almacenada is not None:
                start_time = time.time()
                result = algoritmo.quick(columna_almacenada)
                elapsed_time = time.time() - start_time

                # Crea una nueva ventana
                new_window = Toplevel()
                new_window.title("Resultado de Quick Sort")

                # Crea un widget Text y añade el resultado
                text_widget = Text(new_window)
                text_widget.insert("end", str(result))
                text_widget.insert("end", f"Tiempo de ejecución: {elapsed_time} segundos")
                text_widget.pack()

            else:
                print("No se ha seleccionado ninguna columna")

        button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))

        Quick_button = Button(
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=quick_sort,
            relief="flat"
        )
        Quick_button.place(
            x=682.0,
            y=173.0,
            width=275.0,
            height=115.0
        )

        def bucket_sort():
            if columna_almacenada is not None:
                start_time = time.time()
                result = algoritmo.bucket_sort(columna_almacenada)
                elapsed_time = time.time() - start_time

                # Crea una nueva ventana
                new_window = Toplevel()
                new_window.title("Resultado de Bucket Sort")

                # Crea un widget Text y añade el resultado
                text_widget = Text(new_window)
                text_widget.insert("end", str(result))
                text_widget.insert("end", f"Tiempo de ejecución: {elapsed_time} segundos")
                text_widget.pack()

            else:
                print("No se ha seleccionado ninguna columna")

        button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        Bucket_button = Button(
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=bucket_sort,
            relief="flat"
        )
        Bucket_button.place(
            x=695.0,
            y=280.0,
            width=248.0,
            height=102.0
        )

        def count_sort():
            if columna_almacenada is not None:
                start_time = time.time()
                result = algoritmo.counting_sort(columna_almacenada)
                elapsed_time = time.time() - start_time

                # Crea una nueva ventana
                new_window = Toplevel()
                new_window.title("Resultado de Counting Sort")

                # Crea un widget Text y añade el resultado
                text_widget = Text(new_window)
                text_widget.insert("end", str(result))
                text_widget.insert("end", f"Tiempo de ejecución: {elapsed_time} segundos")
                text_widget.pack()

            else:
                print("No se ha seleccionado ninguna columna")

        button_image_4 = PhotoImage(
            file=relative_to_assets("button_4.png"))
        Count_button = Button(
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=count_sort,
            relief="flat"
        )
        Count_button.place(
            x=689.0,
            y=483.0,
            width=244.0,
            height=104.0
        )

        def radix_sort():
            if columna_almacenada is not None:
                start_time = time.time()
                result = algoritmo.radix_sort(columna_almacenada)
                elapsed_time = time.time() - start_time

                # Crea una nueva ventana
                new_window = Toplevel()
                new_window.title("Resultado de Radix Sort")

                # Crea un widget Text y añade el resultado
                text_widget = Text(new_window)
                text_widget.insert("end", str(result))
                text_widget.insert("end", f"Tiempo de ejecución: {elapsed_time} segundos")
                text_widget.pack()

            else:
                print("No se ha seleccionado ninguna columna")

        button_image_5 = PhotoImage(
            file=relative_to_assets("button_5.png"))
        Radix_button = Button(
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=radix_sort,
            relief="flat"
        )
        Radix_button.place(
            x=689.0,
            y=587.0,
            width=259.0,
            height=108.0
        )

        def merge_sort():
            if columna_almacenada is not None:
                start_time = time.time()
                result = algoritmo.merge_sort(columna_almacenada)
                elapsed_time = time.time() - start_time

                # Crea una nueva ventana
                new_window = Toplevel()
                new_window.title("Resultado de merge Sort")

                # Crea un widget Text y añade el resultado
                text_widget = Text(new_window)
                text_widget.insert("end", str(result))
                text_widget.insert("end", f"Tiempo de ejecución: {elapsed_time} segundos")
                text_widget.pack()

            else:
                print("No se ha seleccionado ninguna columna")

        image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = canvas.create_image(
            117.39537048339844,
            656.2723999023438,
            image=image_image_1
        )

        button_image_7 = PhotoImage(
            file=relative_to_assets("button_7.png"))
        Merge_button = Button(
            image=button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=merge_sort,
            relief="flat"
        )
        Merge_button.place(
            x=689.0,
            y=377.0,
            width=268.0,
            height=113.0
        )

        canvas.create_text(
            200,
            347.5,
            anchor="nw",
            text="Columna a ordenar",
            fill="#7C838A",
            font=("Poppins Medium", 20 * -1)
        )

        canvas.create_text(
            194.0,
            186.0,
            anchor="nw",
            text="link con datos\n",
            fill="#7C838A",
            font=("Poppins Medium", 20 * -1)
        )

        canvas.create_text(
            216.0,
            147.0,
            anchor="nw",
            text="Ordena un DataFrame de datos",
            fill="#000000",
            font=("Poppins SemiBold", 18 * -1)
        )

        entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            361.5,
            244.5,
            image=entry_image_1
        )

        def mostrar_columnas():
            global link_almacenado
            link_almacenado = Link_datos.get()
            gestor = GestorDataFrame(link_almacenado)

            df = gestor.imprimir_todos_los_datos()

            new_window = Toplevel()
            new_window.title("Resultado del Análisis")

            text_widget = Text(new_window)
            text_widget.insert("end", df.to_string(index=False))
            text_widget.pack()

        global Link_datos
        Link_datos = Entry(
            bd=0,
            bg="#E0E0E0",
            fg="#000716",
            highlightthickness=0
        )

        Link_datos.place(
            x=199.0,
            y=227.0,
            width=325.0,
            height=33.0
        )

        button_image = PhotoImage(file=relative_to_assets("button_columnas.png"))
        Submit_button = Button(
            image=button_image,
            borderwidth=0,
            highlightthickness=0,
            command= mostrar_columnas,
            relief="flat"
        )
        Submit_button.place(x=212.0, y=267.0, width=289.0, height=67.0)


        entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = canvas.create_image(
            361.0,
            390.0,
            image=entry_image_2
        )

        global Analizar_columna
        Analizar_columna = Entry(
            bd=0,
            bg="#E0E0E0",
            fg="#000716",
            highlightthickness=0
        )
        Analizar_columna.place(
            x=199.0,
            y=375.0,
            width=325.0,
            height=33.0
        )

        image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = canvas.create_image(
            539.0,
            388.0,
            image=image_image_2
        )

        def submit():
            global link_almacenado, columna_almacenada
            link_almacenado = Link_datos.get()
            gestor = GestorDataFrame(link_almacenado)
            columna_almacenada = gestor.obtener_lista_de_columna(Analizar_columna.get())

            # Obtiene el DataFrame como una cadena
            df_str = str(gestor.imprimir_todos_los_datos())

            # Crea una nueva ventana
            new_window = Toplevel()
            new_window.title("DataFrame")

            # Crea un widget Text y añade el DataFrame
            text_widget = Text(new_window)
            text_widget.insert("end", df_str)
            text_widget.pack()


        button_image_6 = PhotoImage(
            file=relative_to_assets("button_6.png"))
        Submit_button = Button(
            image=button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=submit,
            relief="flat"
        )
        Submit_button.place(
            x=216.0,
            y=415.0,
            width=289.0,
            height=67.0
        )
        window.resizable(False, False)
        window.mainloop()






mi_vista = Vista()
mi_vista.main()
